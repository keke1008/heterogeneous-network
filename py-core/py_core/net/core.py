from collections.abc import AsyncIterator
from typing import AsyncContextManager, Awaitable, Callable, Protocol
from py_core.net.link.address import Address
from py_core.net.node.node_id import NodeId
from py_core.net.tunnel.port import TunnelPort


class Socket(Protocol):
    @property
    def remote_node_id(self) -> NodeId: ...
    def remote_port(self) -> TunnelPort: ...

    async def send(self, data: bytes) -> None: ...
    async def recv(self, n: int) -> bytes: ...
    async def __aiter__(self) -> AsyncIterator[bytes]: ...


type SocketHandler = Callable[[Socket], Awaitable[None]]


class NetCore:
    async def send_hello(self, address: Address) -> None: ...

    async def open_tunnel(self, handler: SocketHandler, port: TunnelPort) -> None: ...
    async def connect_tunnel(
        self, remote: NodeId, port: TunnelPort
    ) -> AsyncContextManager[Socket]: ...

    async def open_trusted(self, handler: SocketHandler, port: TunnelPort) -> None: ...
    async def connect_trusted(
        self, remote: NodeId, port: TunnelPort
    ) -> AsyncContextManager[Socket]: ...

    async def open_stream(self, handler: SocketHandler, port: TunnelPort) -> None: ...
    async def connect_stream(
        self, remote: NodeId, port: TunnelPort
    ) -> AsyncContextManager[Socket]: ...
